from email import header, message
from pyexpat import native_encoding
from traceback import print_tb
from aiogram import Bot, Dispatcher, executor, types
import requests
from bs4 import BeautifulSoup
import lxml
import json
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import schedule
from aiogram.utils.markdown import hlink


#–ó–∞–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—É –ø–æ —Ç–æ–∫–µ–Ω—É / Create token
TOKEN = None #–û–±–æ–∑–Ω–∞—á–∞–µ–º —Ç–æ–∫–µ–Ω / Denote token
with open("C:/Users/applm/OneDrive/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/Projects/project BOT/TOKEN.txt") as f:  #–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º / Open file with token
    TOKEN = f.read().strip() #–°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ / Read and delete excess

bot = Bot (TOKEN, parse_mode=types.ParseMode.HTML) #–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω / Assigning a token


#–°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ / Dictionary for parse
news_dict = {}


#Dp = –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –∫–æ–º–º–∞–Ω–¥ / Dispatcherfor command
dp = Dispatcher (bot)


#–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–¥ –∫–ª–∞–≤—ã / Return keyboard
catsMain = KeyboardButton ('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') 


#–ö–ª–∞–≤–∞ / Keyboard
news_key = KeyboardButton('/news') #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É / Create button
news_last = KeyboardButton('/last') #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É / Create button
fresh_news = KeyboardButton('/fresh') #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É / Create button
cats = KeyboardButton("/kitty ü¶ä") #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É / Create button
mainMenu = ReplyKeyboardMarkup(resize_keyboard=True).row(news_key,news_last,fresh_news,cats) #–í—ã–≤–æ–¥–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ / Output keyboard with buttons


#–ü–æ–¥–∫–ª–∞–≤–∞ –¥–ª—è –∫–∏—Ç–∏–∫–æ–≤ / Sub keyboard for kitty
cats_animation = KeyboardButton('/flex_kitty üêà') #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É / Create button
cats_picture = KeyboardButton('/kitty üòº') #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É / Create button
back = KeyboardButton('/back ‚ùå') #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É / Create button
catsMenu = ReplyKeyboardMarkup (resize_keyboard=True).row(back,cats_animation,cats_picture) #–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ –ø–æ–¥ –∫–ª–∞–≤—ã –≤ –≥–ª–∞–≤ –∫–ª–∞–≤—É / Return main keyboard from sub keyborad


#–°–æ–æ–±—â–µ–Ω–∏–µ –≤ CMD –æ —Å—Ç–∞—Ä—Ç–µ / Message about start in CMD
async def on_startup (_): #–ó–∞–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é / Setting the function
    print ("–ú–£–ó–´–ö–ê –ü–û–®–õ–ê") #–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è / Output message


#–ö–æ–º–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ / Command start
@dp.message_handler (commands = ["start"]) #–ó–∞–¥–∞–µ–º –∫–æ–º–º–∞–Ω–¥—É / Setting the command
async def start  (message: types.Message): #–ó–∞–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é / Setting the function
    await bot.send_message( message.from_user.id, 'YEP –Ω–∞—á–∏–Ω–∞–µ–º',reply_markup = mainMenu) #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ / Send hello
    await bot.send_sticker(message.chat.id,"CAACAgIAAxkBAAEFiWli9TsP9B1BLa8HrEqL51EtH4UQEAACnhYAArpIyUtcjAeK6Rs_SykE") #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä / Send sticker


#–ü–∞—Ä—Å–µ—Ä —Å –≤—ã–≤–æ–¥–æ–º / Parse with output
@dp.message_handler (commands=["news"]) 
async def news (message: types.Message):
    header = {
    'user-agent':"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.167 YaBrowser/22.7.5.940 Yowser/2.5 Safari/537.36"
    }
    url = ("https://www.cybersport.ru/tags/dota-2")
    r = requests.get (url=url)
    soup = BeautifulSoup (r.text, "lxml")
    rounded_block = soup.find_all (class_="rounded-block root_d51Rr with-hover no-padding no-margin")
    for round in rounded_block:
        round_title = round.find (class_="title_nSS03").text
        round_data = round.find (class_="pub_AKjdn").text
        round_link = round.find (class_="link_CocWY")
        round_url = f'https://www.cybersport.ru{round_link.get("href")}'
        news_dict [round_data] = {
            "time": round_data,
            "title": round_title,
            "url": round_url }

    with open ("news_dict.json","w",encoding='utf-8') as file:
        json.dump(news_dict, file, indent=4, ensure_ascii=False)

        for k,v in sorted(news_dict.items()):
            news = f"<b>{v['time']}</b>\n"\
            f"{hlink(v['title'],v['url'])}"
            await message.answer(news)


#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–∏–Ω–æ–∫–Ω–æ–≤–æ—Å—Ç–µ–π –≤ json c —Ç–∞–π–º–µ—Ä–æ–º –Ω–∞ 30 –º–∏–Ω—É—Ç / Check new news to json with timer on 30 seconds
@dp.message_handler(commands=["fresh"])
async def check_update_news(message: types.Message):
    with open ("news_dict.json", encoding='utf-8') as file:
        news_dict = json.load (file)
    url = ("https://www.cybersport.ru/tags/dota-2")
    r = requests.get (url=url)
    soup = BeautifulSoup (r.text, "lxml")
    rounded_block = soup.find_all (class_="rounded-block root_d51Rr with-hover no-padding no-margin")
    fresh_news = {}
    for round in rounded_block:
        round_data = round.find (class_="pub_AKjdn").text
        if round_data in news_dict:
            continue
        else:
            round_title = round.find (class_="title_nSS03").text
            round_data = round.find (class_="pub_AKjdn").text
            round_link = round.find (class_="link_CocWY")
            round_url = f'https://www.cybersport.ru{round_link.get("href")}'
            fresh_news [round_data] = {
                "time": round_data,
                "title": round_title,
                "url": round_url
            }
    with open ("fresh_news.json","w",encoding='utf-8') as file:
        json.dump(fresh_news, file, indent=4, ensure_ascii=False)

        for k,v in sorted(fresh_news.items()):
            fresh = f"<b>{v['time']}</b>\n"\
            f"{hlink(v['title'],v['url'])}"

    if len(fresh_news) >=1:
        await message.answer(fresh)
    else:
        await message.answer("–°–≤–µ–∂–∞–∫–∞ –µ—â–µ –Ω–µ –ø–æ–¥–≤–µ–∑–ª–∏")




@dp.message_handler(commands=["last"])
async def last_news(message: types.Message):
    with open ("news_dict.json",encoding='utf-8') as file:
        news_dict = json.load(file)
    for k,v in sorted(news_dict.items())[-1:]:
        news = f"<b>{v['time']}</b>\n"\
        f"{hlink(v['title'],v['url'])}"
        await message.answer(news)

@dp.message_handler()
async def kitty (message):       
    if message.text == "/kitty ü¶ä":
        await bot.send_message( message.from_user.id, '–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —Ç—ã —Ö–æ—á–µ—à—å',reply_markup = catsMenu)
    if message.text == "/flex_kitty üêà":
        await bot.send_sticker(message.chat.id,"CAACAgIAAxkBAAEFkWti-oEXVf1fIkJDQjvMjDt2WyAZ1wACNBcAAkOaoEhNfT8fIoHPmCkE")
    elif message.text == "/kitty üòº":
        await bot.send_sticker(message.chat.id,"CAACAgIAAxkBAAEF9I9jNd9ItkiG4oztiyly1n3Z0jD8SAACIwADezwGEa6cmphaatyTKgQ")
    elif message.text == "/back ‚ùå":
        await bot.send_message( message.from_user.id, '–î–∞–µ–º —Å–µ–±–∞—Å–∞',reply_markup = mainMenu)

#–¢–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç 
# schedule.every(1).minutes.do(check_update_news)
#     while True: 
#         schedule.run_pending()

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∏—Ç—Ç–∏–∫–æ–≤ / Kitty keyboard

#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞  
if __name__ == "__main__":
    executor.start_polling (dp, skip_updates=True, on_startup=on_startup)
