from email import header, message
from encodings import utf_8, utf_8_sig
from pickle import NONE
from pyexpat import native_encoding
from secrets import choice
from aiogram import Bot, Dispatcher, executor, types
import requests
from bs4 import BeautifulSoup
import lxml
import json
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.markdown import hlink
import random


#–ó–∞–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—É –ø–æ —Ç–æ–∫–µ–Ω—É / Create token
TOKEN = None #–û–±–æ–∑–Ω–∞—á–∞–µ–º —Ç–æ–∫–µ–Ω / Denote token
with open("C:/Users/applm/OneDrive/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/Projects/project BOT/TOKEN.txt") as f:  #–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º / Open file with token
    TOKEN = f.read().strip() #–°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ / Read and delete excess

bot = Bot (TOKEN, parse_mode=types.ParseMode.HTML) #–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω / Assigning a token


#–°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ / Dictionary for parse
news_dict = {}


#Dp = –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –∫–æ–º–º–∞–Ω–¥ / Dispatcherfor command
dp = Dispatcher (bot)


#Back
backMain = KeyboardButton('/backMain ‚ùå')
backJuk = KeyboardButton('/backJuk ‚ùå')
backKitty = KeyboardButton('/bacKitty ‚ùå')

#MainMenu
niws = KeyboardButton('/news ‚úâÔ∏è')
ixtr = KeyboardButton('/juk üôÇ')
mainMenu = ReplyKeyboardMarkup (resize_keyboard=True).row(niws,ixtr)


#ixtrMenu
kits = KeyboardButton('/kitty ü¶ä')
joke = KeyboardButton('/joke üòÇ')
ixtrMenu = ReplyKeyboardMarkup(resize_keyboard=True).row(kits,joke,backMain)


#KitsMenu
sticker = KeyboardButton('/sticker üéÜ') 
image = KeyboardButton('/image üñº')
kitsMenu = ReplyKeyboardMarkup(resize_keyboard=True).row(sticker,image,backJuk)


#StickerMenu
static = KeyboardButton('/tomcat üòº')
flexkit = KeyboardButton('/flexkitty üêà')
stickerMenu = ReplyKeyboardMarkup(resize_keyboard=True).row(static,flexkit,backKitty)


#–°–æ–æ–±—â–µ–Ω–∏–µ –≤ CMD –æ —Å—Ç–∞—Ä—Ç–µ / Message about start in CMD
async def on_startup (_): #–ó–∞–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é / Setting the function
    print ("–ú–£–ó–´–ö–ê –ü–û–®–õ–ê") #–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è / Output message


#–ö–æ–º–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ / Command start
@dp.message_handler (commands = ["start"]) #–ó–∞–¥–∞–µ–º –∫–æ–º–º–∞–Ω–¥—É / Setting the command
async def start  (message: types.Message): #–ó–∞–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é / Setting the function
    await bot.send_message( message.from_user.id, 'YEP –Ω–∞—á–∏–Ω–∞–µ–º',reply_markup = mainMenu) #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ / Send hello
    await bot.send_message( message.from_user.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é, –ø–∏—à–∏ /help')
    await bot.send_sticker(message.chat.id,"CAACAgIAAxkBAAEFiWli9TsP9B1BLa8HrEqL51EtH4UQEAACnhYAArpIyUtcjAeK6Rs_SykE") #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä / Send sticker
    

#–ü–∞—Ä—Å–µ—Ä —Å –≤—ã–≤–æ–¥–æ–º / Parse with output
@dp.message_handler (commands=["NewsDota"]) 
async def news (message: types.Message):
    header = {
    'user-agent':"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.167 YaBrowser/22.7.5.940 Yowser/2.5 Safari/537.36"
    }
    url = ("https://www.cybersport.ru/tags/dota-2")
    r = requests.get (url=url)
    soup = BeautifulSoup (r.text, "lxml")
    rounded_block = soup.find_all (class_="rounded-block root_d51Rr with-hover no-padding no-margin")
    for round in rounded_block:
        round_title = round.find (class_="title_nSS03").text
        round_data = round.find (class_="pub_AKjdn").text
        round_link = round.find (class_="link_CocWY")
        round_url = f'https://www.cybersport.ru{round_link.get("href")}'
        news_dict [round_data] = {
            "time": round_data,
            "title": round_title,
            "url": round_url }

    with open ("news_dict.json","w",encoding='utf-8') as file:
        json.dump(news_dict, file, indent=4, ensure_ascii=False)

        for k,v in sorted(news_dict.items()):
            news = f"<b>{v['time']}</b>\n"\
            f"{hlink(v['title'],v['url'])}"
            await message.answer(news)


#–í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç / Output a last news at moment
@dp.message_handler(commands=["last"])
async def news (message: types.Message):
    header = {
    'user-agent':"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.167 YaBrowser/22.7.5.940 Yowser/2.5 Safari/537.36"
    }
    url = ("https://www.cybersport.ru/tags/dota-2")
    r = requests.get (url=url)
    soup = BeautifulSoup (r.text, "lxml")
    rounded_block = soup.find_all (class_="rounded-block root_d51Rr with-hover no-padding no-margin")
    for round in rounded_block:
        round_title = round.find (class_="title_nSS03").text
        round_data = round.find (class_="pub_AKjdn").text
        round_link = round.find (class_="link_CocWY")
        round_url = f'https://www.cybersport.ru{round_link.get("href")}'
        news_dict [round_data] = {
            "time": round_data,
            "title": round_title,
            "url": round_url }

    with open ("news_dict.json","w",encoding='utf-8') as file:
        json.dump(news_dict, file, indent=4, ensure_ascii=False)

        for k,v in sorted(news_dict.items())[-1:]:
            news = f"<b>{v['time']}</b>\n"\
            f"{hlink(v['title'],v['url'])}"
            await message.answer(news)


#C–ø–∏—Å–æ–∫ id —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–æ—Ç–æ–≤ / List id stickers static cats
stat = ["CAACAgIAAxkBAAEGReBjYN1bncaxE0k4O8yqWpHidwq-QQADFwACBud5SAZAQLkOAjyhKgQ", #CATS
"CAACAgIAAxkBAAEF9I9jNd9ItkiG4oztiyly1n3Z0jD8SAACIwADezwGEa6cmphaatyTKgQ",
"CAACAgIAAxkBAAEGReZjYN23Pp7-EJ9uxQbGg1r0mLThsAACRhAAAnN6CUt9kgUt0XU89ioE",
"CAACAgIAAxkBAAEGRehjYN3B63RU0TqbkSlFW0vdW4ZPfAACjg8AApdNCUsYXNqjioE8WioE",
"CAACAgIAAxkBAAEGRepjYN3Df_-tKfuSL5pddAcfmsETrgACEg0AAunxCUvhn1Q5qy-GUSoE",
"CAACAgIAAxkBAAEGRexjYN3RTz_FNU_mX17K-GMiVSPluQACLg8AAqswCEsreRP3r0AjwioE",
"CAACAgIAAxkBAAEGRe1jYN3RP-lLL4qb-5wrvhM-xd5-wQACrAwAAim2CUsgawABJJBx8_sqBA",
"CAACAgIAAxkBAAEGRfBjYN3TK7LxnWJ4sGF4clFC0Ej4GwAC_AwAAmn2CUunISFcu6AR3yoE"]

#—Å–ø–∏—Å–æ–∫ id —Å—Ç–∏–∫–µ—Ä–æ–≤ —Ñ–ª–µ–∫—Å—è—â–∏—Ö –∫–æ—Ç–æ–≤ / List id stikers flex cats
flex = ["CAACAgIAAxkBAAEFkWti-oEXVf1fIkJDQjvMjDt2WyAZ1wACNBcAAkOaoEhNfT8fIoHPmCkE", #FLEX
"CAACAgIAAxkBAAEGRdBjYN0J4YyYdPS6O1PIY6ZqRX1vhAACoxwAAiK_oEhAt_ZmqiP8iCoE",
"CAACAgIAAxkBAAEGRdFjYN0KL1u7uPzOAAGLYZDrPkTuSgoAAooTAAJMKKhIU9jSLbNMSMsqBA",
"CAACAgIAAxkBAAEGRdJjYN0KzVXO-VoJhyObdplZgxb3TwACVxUAAoTs6UhuQVQZpoVpASoE",
"CAACAgIAAxkBAAEGRdZjYN02Htlvpp3v5l2h6I50KM-iwgACixgAAin9qUixIZgpBYJiLCoE",
"CAACAgIAAxkBAAEGRdpjYN1JeEA53XKLWhgOwDQhtylUjgACihMAAjSNSUirTNDsAVVtjSoE",
"CAACAgIAAxkBAAEGRdxjYN1UTKGlQhN8E2MLwzeU9Bbu5gACZRYAAq8SCUjHYG0TMAAB5-4qBA",
"CAACAgIAAxkBAAEGRd5jYN1Z98oRRs3rbbIAAYoN6juyUdwAAk4YAAJPp9BL5qYnFJhB_RwqBA",
"CAACAgIAAxkBAAEGReRjYN2UUuk4qPEw7A7EwR0_Sf_WWwACKhcAAu_jyEvWhp-EtkEyvioE"]

#—Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö
jokers = ["""–ó–∞—Ö–æ–¥–∏—Ç –æ–¥–Ω–∞–∂–¥—ã –≤ –±–∞—Ä —É–ª–∏—Ç–∫–∞ –∏ –≥–æ–≤–æ—Ä–∏—Ç:
-–ú–æ–∂–Ω–æ –≤–∏—Å–∫–∏ —Å –∫–æ–ª–æ–π?
- –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º —É–ª–∏—Ç–æ–∫.
–ò –±–∞—Ä–º–µ–Ω –≤—ã—à–≤—ã—Ä–Ω—É–ª –µ–µ –∑–∞ –¥–≤–µ—Ä—å.
–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –∑–∞—Ö–æ–¥–∏—Ç –æ–ø—è—Ç—å —ç—Ç–∞ —É–ª–∏—Ç–∫–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:
-–ù—É –∏ –Ω–∞—Ö—É—è —Ç—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª!?""",
"""–ë–∞–±—É—à–∫–∞ –ø–µ—Ä–µ—à–ª–∞ –¥–æ—Ä–æ–≥—É –Ω–µ –Ω–∞ —Ç–æ—Ç —Å–≤–µ—Ç,
–∏ –ø–æ–ø–∞–ª–∞ –Ω–∞ —Ç–æ—Ç —Å–≤–µ—Ç.""",
"""–ö–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–ª —Å–≤–æ—é –ø–µ—á–µ–Ω—å?
–û–±–µ—Å–ø–µ—á–µ–Ω–Ω—ã–π."""]


@dp.message_handler (commands=["help"])
async def help (message: types.Message):
    await bot.send_message(message.chat.id, """–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∞ –∏ –∫—Ä–∏—Ç–æ–≤–∞–ª—é—Ç, –Ω–æ —Ç–∞–∫–∂–µ —É–º–µ—é –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–∏–∫–æ–ª—å—á–∏–∫–∏
    –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏ /news
    –î–ª—è –ø—Ä–∏–∫–æ–ª—å—á–∏–∫–æ–≤ –Ω–∞–ø–∏—à–∏ /juk
–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –µ—Å–ª–∏ –ø–∏—Å–∞—Ç—å –≤–ø–∞–¥–ª—É.
–£ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –µ—Å—Ç—å –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è, —á—Ç–æ–±—ã –µ–µ —É–∑–Ω–∞—Ç—å –Ω–∞–ø–∏—à–∏ /more""")

@dp.message_handler (commands=["more"])
async def more (message: types.Message):
    await bot.send_message(message.chat.id,"""–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –ø—Ä–æ–∫–ª–∏–∫–∏–≤–∞—Ç—å –ø–æ –∫–ª–∞–≤–µ.
–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:
    /start (–Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ)
    /help (–ø–æ–º–æ—â—å)
    /more (–±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    /back (–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é)
    /juk (–≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—é –ø—Ä–∏–∫–æ–ª–æ–≤)
    /news (–≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π)
    /joke (–ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä—ã–≤–Ω—É—é)
    /sticker (–≤—ã–≤–æ–¥ –º–µ–Ω—é —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å –∫–æ—Ç–∞–º–∏)
    /tomcat (–ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä —Å –∫–æ—Ç–æ–º)
    /flexkitty (–ø–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä —Å –∫–æ—Ç–æ–º)
    /image (–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∞)""")

@dp.message_handler (commands=["juk"])
async def prikl(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–∫–æ–ª—å—á–∏–∫",reply_markup=ixtrMenu)

@dp.message_handler (commands=["joke"])
async def jk (message: types.Message):
    await bot.send_message(message.chat.id, choice(jokers))

@dp.message_handler (commands=["kitty"])
async def k (message: types.Message):
    await bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ç–∏–∫–∞",reply_markup=kitsMenu)

@dp.message_handler (commands=["sticker"])
async def stic (message: types.Message):
    await bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∏–∫–µ—Ä–∞",reply_markup=stickerMenu)

@dp.message_handler (commands=["tomcat"])
async def sta (message: types.Message):
    await bot.send_sticker(message.chat.id,choice(stat))

@dp.message_handler (commands=["flexkitty"])
async def flx (message: types.Message):
    await bot.send_sticker(message.chat.id,choice(flex))


#—Ñ—Ä–∞–∑—ã –¥–ª—è BACK
literaly = ["–î–∞–µ–º —Å–µ–±–∞—Å–∞","–û—Ñ–æ—Ä–º–ª—è–µ–º —Å–µ–±–∞—Å—Ç—å—è–Ω–∞","–î–∞–≤–∏–º —Å–µ–±–∞—Å—Ç—å—è–Ω–∞","–ë–∞–∑–∏—Ä—É–µ–º—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ","Go back in time","–£–¥–∞–ª—è–µ–º –±—É–¥—É—â–µ–µ","–®–µ—Ä—É–¥–∏–º —Å–µ–±–∞","–û–±–µ—Ä—Ç–∞—Å","–í–∑–∞–¥–ø—è—Ç–∫–∏"]


#–ª–∏—Å—Ç —Å —Ñ–æ—Ç–æ
im = ["https://commons.wikimedia.org/wiki/File:Cat%27s_Eyes.jpg?uselang=ru","https://commons.wikimedia.org/wiki/File:Black_Footed_Cat.jpg?uselang=ru"]


@dp.message_handler (commands=["image"])
async def img (message: types.Message):
    await bot.send_photo(message.chat.id,choice(im))

#Back–ò   

@dp.message_handler (commands=["backMain"])
async def backmain (message: types.Message):
    await bot.send_message(message.from_user.id,choice(literaly),reply_markup=mainMenu)

@dp.message_handler (commands=["backJuk"])
async def backjuk (message: types.Message):
    await bot.send_message(message.from_user.id,choice(literaly),reply_markup=ixtrMenu)

@dp.message_handler (commands=["bacKitty"])
async def backitty (message: types.Message):
    await bot.send_message(message.from_user.id,choice(literaly),reply_markup=kitsMenu)


#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞  
if __name__ == "__main__":
    executor.start_polling (dp, skip_updates=True, on_startup=on_startup)
